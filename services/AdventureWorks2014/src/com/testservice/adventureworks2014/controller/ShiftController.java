/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testservice.adventureworks2014.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.testservice.adventureworks2014.EmployeeDepartmentHistory;
import com.testservice.adventureworks2014.Shift;
import com.testservice.adventureworks2014.service.ShiftService;

/**
 * Controller object for domain model class Shift.
 * @see Shift
 */
@RestController("AdventureWorks2014.ShiftController")
@Api(value = "ShiftController", description = "Exposes APIs to work with Shift resource.")
@RequestMapping("/AdventureWorks2014/Shift")
public class ShiftController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ShiftController.class);

    @Autowired
    @Qualifier("AdventureWorks2014.ShiftService")
    private ShiftService shiftService;

    @ApiOperation(value = "Creates a new Shift instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Shift createShift(@RequestBody Shift shift) {
        LOGGER.debug("Create Shift with information: {}", shift);
        shift = shiftService.create(shift);
        LOGGER.debug("Created Shift with information: {}", shift);
        return shift;
    }

    @ApiOperation(value = "Returns the Shift instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Shift getShift(@PathVariable("id") Byte id) throws EntityNotFoundException {
        LOGGER.debug("Getting Shift with id: {}", id);
        Shift foundShift = shiftService.getById(id);
        LOGGER.debug("Shift details with id: {}", foundShift);
        return foundShift;
    }

    @ApiOperation(value = "Updates the Shift instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Shift editShift(@PathVariable("id") Byte id, @RequestBody Shift shift) throws EntityNotFoundException {
        LOGGER.debug("Editing Shift with id: {}", shift.getShiftId());
        shift.setShiftId(id);
        shift = shiftService.update(shift);
        LOGGER.debug("Shift details with id: {}", shift);
        return shift;
    }

    @ApiOperation(value = "Deletes the Shift instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteShift(@PathVariable("id") Byte id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Shift with id: {}", id);
        Shift deletedShift = shiftService.delete(id);
        return deletedShift != null;
    }

    @RequestMapping(value = "/startTime-endTime", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Shift with given unique key values.")
    public Shift getByStartTimeAndEndTime(@RequestParam(name = "startTime") Date startTime, @RequestParam(name = "endTime") Date endTime) {
        LOGGER.debug("Getting Shift with uniques key StartTimeAndEndTime");
        return shiftService.getByStartTimeAndEndTime(startTime, endTime);
    }

    @RequestMapping(value = "/name/{name}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Shift with given unique key values.")
    public Shift getByName(@PathVariable("name") String name) {
        LOGGER.debug("Getting Shift with uniques key Name");
        return shiftService.getByName(name);
    }

    /**
     * @deprecated Use {@link #findShifts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Shift instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Shift> findShifts(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Shifts list");
        return shiftService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Shift instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Shift> findShifts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Shifts list");
        return shiftService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportShifts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return shiftService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Shift instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countShifts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Shifts");
        return shiftService.count(query);
    }

    @RequestMapping(value = "/{id:.+}/employeeDepartmentHistories", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeDepartmentHistories instance associated with the given id.")
    public Page<EmployeeDepartmentHistory> findAssociatedEmployeeDepartmentHistories(@PathVariable("id") Byte id, Pageable pageable) {
        LOGGER.debug("Fetching all associated employeeDepartmentHistories");
        return shiftService.findAssociatedEmployeeDepartmentHistories(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ShiftService instance
	 */
    protected void setShiftService(ShiftService service) {
        this.shiftService = service;
    }
}
