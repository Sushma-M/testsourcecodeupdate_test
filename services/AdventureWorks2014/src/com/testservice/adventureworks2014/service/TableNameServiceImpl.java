/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testservice.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testservice.adventureworks2014.TableName;


/**
 * ServiceImpl object for domain model class TableName.
 *
 * @see TableName
 */
@Service("AdventureWorks2014.TableNameService")
public class TableNameServiceImpl implements TableNameService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TableNameServiceImpl.class);


    @Autowired
    @Qualifier("AdventureWorks2014.TableNameDao")
    private WMGenericDao<TableName, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TableName, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
	public TableName create(TableName tableName) {
        LOGGER.debug("Creating a new TableName with information: {}", tableName);
        TableName tableNameCreated = this.wmGenericDao.create(tableName);
        return tableNameCreated;
    }

	@Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
	@Override
	public TableName getById(Integer tablenameId) throws EntityNotFoundException {
        LOGGER.debug("Finding TableName by id: {}", tablenameId);
        TableName tableName = this.wmGenericDao.findById(tablenameId);
        if (tableName == null){
            LOGGER.debug("No TableName found with id: {}", tablenameId);
            throw new EntityNotFoundException(String.valueOf(tablenameId));
        }
        return tableName;
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
	@Override
	public TableName findById(Integer tablenameId) {
        LOGGER.debug("Finding TableName by id: {}", tablenameId);
        return this.wmGenericDao.findById(tablenameId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
	@Override
	public TableName update(TableName tableName) throws EntityNotFoundException {
        LOGGER.debug("Updating TableName with information: {}", tableName);
        this.wmGenericDao.update(tableName);

        Integer tablenameId = tableName.getColumn1();

        return this.wmGenericDao.findById(tablenameId);
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
	@Override
	public TableName delete(Integer tablenameId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TableName with id: {}", tablenameId);
        TableName deleted = this.wmGenericDao.findById(tablenameId);
        if (deleted == null) {
            LOGGER.debug("No TableName found with id: {}", tablenameId);
            throw new EntityNotFoundException(String.valueOf(tablenameId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
	@Override
	public Page<TableName> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TableNames");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<TableName> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TableNames");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table TableName to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

